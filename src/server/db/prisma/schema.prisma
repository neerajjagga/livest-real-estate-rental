generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Tenant
  Manager
}

enum Highlight {
  HighSpeedInternetAccess
  WasherDryer
  AirConditioning
  Heating
  SmokeFree
  CableReady
  SatelliteTV
  DoubleVanities
  TubShower
  Intercom
  SprinklerSystem
  RecentlyRenovated
  CloseToTransit
  GreatView
  QuietNeighborhood
}

enum Amenity {
  WasherDryer
  AirConditioning
  Dishwasher
  HighSpeedInternet
  HardwoodFloors
  WalkInClosets
  Microwave
  Refrigerator
  Pool
  Gym
  Parking
  PetsAllowed
  WiFi
}

enum PropertyType {
  Rooms
  Tinyhouse
  Apartment
  Villa
  Townhouse
  Cottage
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

// ---------- User Related
model User {
  id                String        @id @default(uuid())
  name              String
  email             String
  role              UserRole      @default(Tenant)
  emailVerified     Boolean       @default(false)
  image             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
  sessions          Session[]
  accounts          Account[]
  applications      Application[]
  properties        Property[]    @relation("TenantProperties")
  leases            Lease[]
  favorites         Property[]    @relation("TenantFavorites")
  managedProperties Property[]    @relation("PropertyManager")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// ---------- Property related

model Property {
  id                String       @id @default(uuid())
  name              String
  description       String
  pricePerMonth     Float
  securityDeposit   Float
  applicationFee    Float
  photoUrls         String[]
  amenities         Amenity[]
  highlights        Highlight[]
  isPetsAllowed     Boolean      @default(false)
  isParkingIncluded Boolean      @default(false)
  beds              Int
  baths             Float
  squareFeet        Int
  propertyType      PropertyType
  postedDate        DateTime     @default(now())
  averageRating     Float?       @default(0)
  numberOfReviews   Int?         @default(0)
  locationId        String
  managerId         String
  tenants           User[]       @relation("TenantProperties")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  location     Location      @relation(fields: [locationId], references: [id])
  manager      User          @relation(fields: [managerId], references: [id], name: "PropertyManager")
  leases       Lease[]
  applications Application[]
  favoritedBy  User[]        @relation("TenantFavorites")

  @@map("property")
}

model Location {
  id          String                                @id @default(uuid())
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  coordinates Unsupported("geography(Point, 4326)")
  createdAt   DateTime                              @default(now())
  updatedAt   DateTime                              @updatedAt

  properties Property[]

  @@map("location")
}

model Lease {
  id         String   @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  rent       Float
  deposit    Float
  propertyId String
  tenantId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  property    Property     @relation(fields: [propertyId], references: [id])
  tenant      User         @relation(fields: [tenantId], references: [id])
  application Application?
  payments    Payment[]

  @@map("lease")
}

model Application {
  id              String            @id @default(uuid())
  applicationDate DateTime
  status          ApplicationStatus
  propertyId      String
  tenantId        String
  name            String
  email           String
  phoneNumber     String
  message         String?
  leaseId         String?           @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  property Property @relation(fields: [propertyId], references: [id])
  tenant   User     @relation(fields: [tenantId], references: [id])
  lease    Lease?   @relation(fields: [leaseId], references: [id])

  @@map("application")
}

model Payment {
  id            String        @id @default(uuid())
  amountDue     Float
  amountPaid    Float
  dueDate       DateTime
  paymentDate   DateTime
  paymentStatus PaymentStatus
  leaseId       String

  lease Lease @relation(fields: [leaseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment")
}
